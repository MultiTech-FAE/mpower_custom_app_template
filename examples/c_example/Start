#!/bin/bash
#
# Start
#
# Script invoked by the mPower `app-manager` program to start and stop
# applications.
#
# About:
#  This script is a fully cusomizable template that can be used to 
#  initialize the environment for executing the application and starting 
#  all processes. Read the commented documentation and edit to suit.
#
# Arguments:
#  This script is invoked by the mPower `app-manger` application with 
#  the following possible arguments:
#
#   start - start the application process(es)
#   stop  - stop the application process(es)
#   restart - restart the application process(es)
#   reload - reload the application configuration (new config downloaded)
#
# mPower Environment Variables:
#  The mPower applicaiton `app-manager` ensures the following 
#  environment variables are set when appropriate:
#
#    APP_DIR - Installation directory of the application (should always be set.)
#    CONFIG_DIR - Directory containing the configuration file (depends on installation options.)
#
# Debugging Tips:
#  The `Start` file can be invoked manually from the command line using
#  the following invocation:
#
#   `$ sudo APP_DIR=$(pwd) CONFIG_DIR=$(pwd)/config ./Start start`
#
#  Enable verbose output during bash processing of the `Start` script 
#  using by uncommenting the `set -x` command below.
#
#  Log details from the `Start` script to `/var/log/messages` by using
#  the system `logger` command.
#


################################
# Shell
################################

#
# DEBUG: uncomment to enable verbose output during shell processing of 
# the `Start` script.
#
#set -x


################################
# Variables - Edit to suit.
################################

#
#Name
# Application name.
#
NAME="c_example"

#
#DAEMON
# Fully qualified path to application executable.
#
# Examples:
#  Python3 - execute interpreter directly:
#   DAEMON="python3 ${APP_DIR}/example.py"
#
#  Python3 - execute interpreter indirectly (requires executable python script):
#   DAEMON="${APP_DIR}/example.py"
#
#  Compiled Executable (C, C++, etc):
#   DAEMON="${APP_DIR}/example.exe"
#
DAEMON="${APP_DIR}/c_example"

#
#DAEMON_DEBUG_ARGS
#
# Pass optional arguments to daemon when debugging.
#
#DAEMON_DEBUG_ARGS="--logfile /var/log/example_debug.log"

#
#DAEMON_ARGS
# Arguments supplied to the daemon.
#
#DAEMON_ARGS="--cfgfile ${CONFIG_DIR}/example.cfg.json ${DAEMON_DEBUG_ARGS}"


################################
# Variables - Edit if necessary.
################################

#
#START_STOP_DAEMON
# System application responsible for starting/stopping the custom mPower
# application. Default is Linux `start-stop-daemon`.
#
START_STOP_DAEMON="/usr/sbin/start-stop-daemon"

#PID_FILE
# File is created while application is running. Contains application PID.
PID_FILE="/var/run/$NAME.pid"

#RUN_DIR
# Application will run in this directory.
#
RUN_DIR="${APP_DIR}"


################################
# Functions
################################

# Set custom environment variables for the application execution environment.
function SetEnv {
    echo "SetEnv"
}

# This function can be used to chmod files and implement any security initialization
function CreateAccess {
    echo "CreateAccess:"
}

# Intended to be a hook allowing the application to be executed as a non-root user. 
function ChangeUser {
    echo "ChangeUser:"
}

# The nuts and bolts of starting the application process.
function ExecuteStart {
    echo "ExecuteStart:"

# Use this invocation if Read/write access to OS files is required. 
# Works with compiled executables and Python3 scripts.
    $START_STOP_DAEMON --start \
                       --background \
                       --make-pidfile \
                       --pidfile "${PID_FILE}" \
                       --chdir "${RUN_DIR}" \
                       --startas "/bin/bash" \
                       -- -c "exec ${DAEMON} ${DAEMON_ARGS}"
}

# Start the application running process(es)
function Start {
    SetEnv
    CreateAccess
    ChangeUser
    ExecuteStart
}

# Stop the application running process(es)
function Stop {
    echo "Stop:"
    $START_STOP_DAEMON --stop -p "${PID_FILE}" --retry 60
}

# Effectively stop and start the application again.
function Restart {
    echo "Restart:"	
    Stop
    sleep 1
    Start
}

# Notify the application process that new config files are available
function Reload {
    echo "Reload:"
    # Restart not needed for this app
}

#Gather options from command line
# Reset in case getopts has been used previously in the shell.
OPTIND=1

case "$1" in
    # start is invoked by app-manager after install, on boot, and
    # during config install
    start)
        echo -n "Starting $NAME: "
        Start
        ;;
    # stop is invoked by app-manager before shutdown, and during config install
    stop)
        echo -n "Stopping $NAME: "
        Stop
        ;;
    # restart is invoked by app-manager when the app is explicitly restarted
    restart)
        echo -n "Restarting $NAME: "
        Restart
        ;;
    # reload is invoked by app-manager after a new config has been installed
    reload)
        echo -n "Restarting $NAME: "
        Reload
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|reload}" >&2
        exit 1
        ;;
esac

exit 0
